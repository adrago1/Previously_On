{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _parseAnimationValue = _interopRequireDefault(require(\"../util/parseAnimationValue\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _default() {\n  return function ({\n    matchUtilities,\n    theme,\n    variants,\n    prefix\n  }) {\n    let prefixName = name => prefix(`.${name}`).slice(1);\n\n    let keyframes = Object.fromEntries(Object.entries(theme('keyframes') || {}).map(([key, value]) => {\n      return [key, [{\n        [`@keyframes ${prefixName(key)}`]: value\n      }]];\n    }));\n    matchUtilities({\n      animate: (value, {\n        includeRules\n      }) => {\n        let animations = (0, _parseAnimationValue.default)(value);\n\n        for (let {\n          name\n        } of animations) {\n          if (keyframes[name] !== undefined) {\n            includeRules(keyframes[name], {\n              respectImportant: false\n            });\n          }\n        }\n\n        return {\n          animation: animations.map(({\n            name,\n            value\n          }) => {\n            if (name === undefined || keyframes[name] === undefined) {\n              return value;\n            }\n\n            return value.replace(name, prefixName(name));\n          }).join(', ')\n        };\n      }\n    }, {\n      values: theme('animation'),\n      variants: variants('animation')\n    });\n  };\n}","map":{"version":3,"sources":["/home/alan/delivery_2/previously_on/client/node_modules/tailwindcss/lib/plugins/animation.js"],"names":["Object","defineProperty","exports","value","default","_default","_parseAnimationValue","_interopRequireDefault","require","obj","__esModule","matchUtilities","theme","variants","prefix","prefixName","name","slice","keyframes","fromEntries","entries","map","key","animate","includeRules","animations","undefined","respectImportant","animation","replace","join","values"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,oBAAoB,GAAGC,sBAAsB,CAACC,OAAO,CAAC,6BAAD,CAAR,CAAjD;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;;AAE/F,SAASJ,QAAT,GAAoB;AAClB,SAAO,UAAU;AACfM,IAAAA,cADe;AAEfC,IAAAA,KAFe;AAGfC,IAAAA,QAHe;AAIfC,IAAAA;AAJe,GAAV,EAKJ;AACD,QAAIC,UAAU,GAAGC,IAAI,IAAIF,MAAM,CAAE,IAAGE,IAAK,EAAV,CAAN,CAAmBC,KAAnB,CAAyB,CAAzB,CAAzB;;AAEA,QAAIC,SAAS,GAAGlB,MAAM,CAACmB,WAAP,CAAmBnB,MAAM,CAACoB,OAAP,CAAeR,KAAK,CAAC,WAAD,CAAL,IAAsB,EAArC,EAAyCS,GAAzC,CAA6C,CAAC,CAACC,GAAD,EAAMnB,KAAN,CAAD,KAAkB;AAChG,aAAO,CAACmB,GAAD,EAAM,CAAC;AACZ,SAAE,cAAaP,UAAU,CAACO,GAAD,CAAM,EAA/B,GAAmCnB;AADvB,OAAD,CAAN,CAAP;AAGD,KAJkC,CAAnB,CAAhB;AAKAQ,IAAAA,cAAc,CAAC;AACbY,MAAAA,OAAO,EAAE,CAACpB,KAAD,EAAQ;AACfqB,QAAAA;AADe,OAAR,KAEH;AACJ,YAAIC,UAAU,GAAG,CAAC,GAAGnB,oBAAoB,CAACF,OAAzB,EAAkCD,KAAlC,CAAjB;;AAEA,aAAK,IAAI;AACPa,UAAAA;AADO,SAAT,IAEKS,UAFL,EAEiB;AACf,cAAIP,SAAS,CAACF,IAAD,CAAT,KAAoBU,SAAxB,EAAmC;AACjCF,YAAAA,YAAY,CAACN,SAAS,CAACF,IAAD,CAAV,EAAkB;AAC5BW,cAAAA,gBAAgB,EAAE;AADU,aAAlB,CAAZ;AAGD;AACF;;AAED,eAAO;AACLC,UAAAA,SAAS,EAAEH,UAAU,CAACJ,GAAX,CAAe,CAAC;AACzBL,YAAAA,IADyB;AAEzBb,YAAAA;AAFyB,WAAD,KAGpB;AACJ,gBAAIa,IAAI,KAAKU,SAAT,IAAsBR,SAAS,CAACF,IAAD,CAAT,KAAoBU,SAA9C,EAAyD;AACvD,qBAAOvB,KAAP;AACD;;AAED,mBAAOA,KAAK,CAAC0B,OAAN,CAAcb,IAAd,EAAoBD,UAAU,CAACC,IAAD,CAA9B,CAAP;AACD,WATU,EASRc,IATQ,CASH,IATG;AADN,SAAP;AAYD;AA5BY,KAAD,EA6BX;AACDC,MAAAA,MAAM,EAAEnB,KAAK,CAAC,WAAD,CADZ;AAEDC,MAAAA,QAAQ,EAAEA,QAAQ,CAAC,WAAD;AAFjB,KA7BW,CAAd;AAiCD,GA9CD;AA+CD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _parseAnimationValue = _interopRequireDefault(require(\"../util/parseAnimationValue\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _default() {\n  return function ({\n    matchUtilities,\n    theme,\n    variants,\n    prefix\n  }) {\n    let prefixName = name => prefix(`.${name}`).slice(1);\n\n    let keyframes = Object.fromEntries(Object.entries(theme('keyframes') || {}).map(([key, value]) => {\n      return [key, [{\n        [`@keyframes ${prefixName(key)}`]: value\n      }]];\n    }));\n    matchUtilities({\n      animate: (value, {\n        includeRules\n      }) => {\n        let animations = (0, _parseAnimationValue.default)(value);\n\n        for (let {\n          name\n        } of animations) {\n          if (keyframes[name] !== undefined) {\n            includeRules(keyframes[name], {\n              respectImportant: false\n            });\n          }\n        }\n\n        return {\n          animation: animations.map(({\n            name,\n            value\n          }) => {\n            if (name === undefined || keyframes[name] === undefined) {\n              return value;\n            }\n\n            return value.replace(name, prefixName(name));\n          }).join(', ')\n        };\n      }\n    }, {\n      values: theme('animation'),\n      variants: variants('animation')\n    });\n  };\n}"]},"metadata":{},"sourceType":"script"}