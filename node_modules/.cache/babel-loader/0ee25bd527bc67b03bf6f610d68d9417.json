{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tailwindExtractor = tailwindExtractor;\nexports.default = purgeUnusedUtilities;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _purgecss = _interopRequireWildcard(require(\"purgecss\"));\n\nvar _log = _interopRequireDefault(require(\"../util/log\"));\n\nvar _htmlTags = _interopRequireDefault(require(\"html-tags\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _parseDependency = _interopRequireDefault(require(\"../util/parseDependency\"));\n\nvar _normalizePath = _interopRequireDefault(require(\"normalize-path\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction removeTailwindMarkers(css) {\n  css.walkAtRules('tailwind', rule => rule.remove());\n  css.walkComments(comment => {\n    switch (comment.text.trim()) {\n      case 'tailwind start base':\n      case 'tailwind end base':\n      case 'tailwind start components':\n      case 'tailwind start utilities':\n      case 'tailwind end components':\n      case 'tailwind end utilities':\n        comment.remove();\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nfunction tailwindExtractor(content) {\n  // Capture as liberally as possible, including things like `h-(screen-1.5)`\n  const broadMatches = content.match(/[^<>\"'`\\s]*[^<>\"'`\\s:]/g) || [];\n  const broadMatchesWithoutTrailingSlash = broadMatches.map(match => _lodash.default.trimEnd(match, '\\\\')); // Capture classes within other delimiters like .block(class=\"w-1/2\") in Pug\n\n  const innerMatches = content.match(/[^<>\"'`\\s.(){}[\\]#=%]*[^<>\"'`\\s.(){}[\\]#=%:]/g) || [];\n  return broadMatches.concat(broadMatchesWithoutTrailingSlash).concat(innerMatches);\n}\n\nfunction getTransformer(config, fileExtension) {\n  let transformers = config.purge && config.purge.transform || {};\n\n  if (typeof transformers === 'function') {\n    transformers = {\n      DEFAULT: transformers\n    };\n  }\n\n  return transformers[fileExtension] || transformers.DEFAULT || (content => content);\n}\n\nfunction purgeUnusedUtilities(config, configChanged, registerDependency) {\n  var _config$purge;\n\n  const purgeEnabled = _lodash.default.get(config, 'purge.enabled', config.purge !== false && config.purge !== undefined && process.env.NODE_ENV === 'production');\n\n  if (!purgeEnabled) {\n    return removeTailwindMarkers;\n  } // Skip if `purge: []` since that's part of the default config\n\n\n  if (Array.isArray(config.purge) && config.purge.length === 0) {\n    if (configChanged) {\n      _log.default.warn(['Tailwind is not purging unused styles because no template paths have been provided.', 'If you have manually configured PurgeCSS outside of Tailwind or are deliberately not removing unused styles, set `purge: false` in your Tailwind config file to silence this warning.', 'https://tailwindcss.com/docs/controlling-file-size/#removing-unused-css']);\n    }\n\n    return removeTailwindMarkers;\n  }\n\n  const extractors = config.purge.extract || {};\n  const transformers = config.purge.transform || {};\n  let {\n    defaultExtractor: originalDefaultExtractor,\n    ...purgeOptions\n  } = config.purge.options || {};\n\n  if ((_config$purge = config.purge) !== null && _config$purge !== void 0 && _config$purge.safelist && !purgeOptions.hasOwnProperty('safelist')) {\n    purgeOptions.safelist = config.purge.safelist;\n  }\n\n  if (!originalDefaultExtractor) {\n    originalDefaultExtractor = typeof extractors === 'function' ? extractors : extractors.DEFAULT || tailwindExtractor;\n  }\n\n  const defaultExtractor = content => {\n    const preserved = originalDefaultExtractor(content);\n\n    if (_lodash.default.get(config, 'purge.preserveHtmlElements', true)) {\n      preserved.push(..._htmlTags.default);\n    }\n\n    return preserved;\n  }; // If `extractors` is a function then we don't have any file-specific extractors,\n  // only a default one.\n\n\n  let fileSpecificExtractors = typeof extractors === 'function' ? {} : extractors; // PurgeCSS doesn't support \"transformers,\" so we implement those using extractors.\n  // If we have a custom transformer for an extension, but not a matching extractor,\n  // then we need to create an extractor that we can augment later.\n\n  if (typeof transformers !== 'function') {\n    for (let [extension] of Object.entries(transformers)) {\n      if (!fileSpecificExtractors[extension]) {\n        fileSpecificExtractors[extension] = defaultExtractor;\n      }\n    }\n  } // Augment file-specific extractors by running the transformer before we extract classes.\n\n\n  fileSpecificExtractors = Object.entries(fileSpecificExtractors).map(([extension, extractor]) => {\n    return {\n      extensions: [extension],\n      extractor: content => {\n        const transformer = getTransformer(config, extension);\n        return extractor(transformer(content));\n      }\n    };\n  });\n  let content = (Array.isArray(config.purge) ? config.purge : config.purge.content || purgeOptions.content || []).map(item => {\n    if (typeof item === 'string') {\n      return (0, _normalizePath.default)(_path.default.resolve(item));\n    }\n\n    return item;\n  });\n\n  for (let fileOrGlob of content.filter(item => typeof item === 'string')) {\n    registerDependency((0, _parseDependency.default)(fileOrGlob));\n  }\n\n  let hasLayers = false;\n\n  const mode = _lodash.default.get(config, 'purge.mode', 'layers');\n\n  return (0, _postcss.default)([function (css) {\n    if (!['all', 'layers'].includes(mode)) {\n      throw new Error('Purge `mode` must be one of `layers` or `all`.');\n    }\n\n    if (mode === 'all') {\n      return;\n    }\n\n    const layers = _lodash.default.get(config, 'purge.layers', ['base', 'components', 'utilities']);\n\n    css.walkComments(comment => {\n      switch (comment.text.trim()) {\n        case `purgecss start ignore`:\n          comment.before(_postcss.default.comment({\n            text: 'purgecss end ignore'\n          }));\n          break;\n\n        case `purgecss end ignore`:\n          comment.before(_postcss.default.comment({\n            text: 'purgecss end ignore'\n          }));\n          comment.text = 'purgecss start ignore';\n          break;\n\n        default:\n          break;\n      }\n\n      layers.forEach(layer => {\n        switch (comment.text.trim()) {\n          case `tailwind start ${layer}`:\n            comment.text = 'purgecss end ignore';\n            hasLayers = true;\n            break;\n\n          case `tailwind end ${layer}`:\n            comment.text = 'purgecss start ignore';\n            break;\n\n          default:\n            break;\n        }\n      });\n    });\n    css.prepend(_postcss.default.comment({\n      text: 'purgecss start ignore'\n    }));\n    css.append(_postcss.default.comment({\n      text: 'purgecss end ignore'\n    }));\n  }, removeTailwindMarkers, async function (css) {\n    if (mode === 'layers' && !hasLayers) {\n      return;\n    }\n\n    const purgeCSS = new _purgecss.default();\n    purgeCSS.options = { ..._purgecss.defaultOptions,\n      defaultExtractor: content => {\n        const transformer = getTransformer(config);\n        return defaultExtractor(transformer(content));\n      },\n      extractors: fileSpecificExtractors,\n      ...purgeOptions,\n      safelist: (0, _purgecss.standardizeSafelist)(purgeOptions.safelist)\n    };\n\n    if (purgeCSS.options.variables) {\n      purgeCSS.variablesStructure.safelist = purgeCSS.options.safelist.variables || [];\n    }\n\n    const fileFormatContents = content.filter(o => typeof o === 'string');\n    const rawFormatContents = content.filter(o => typeof o === 'object');\n    const cssFileSelectors = await purgeCSS.extractSelectorsFromFiles(fileFormatContents, purgeCSS.options.extractors);\n    const cssRawSelectors = await purgeCSS.extractSelectorsFromString(rawFormatContents, purgeCSS.options.extractors);\n    const cssSelectors = (0, _purgecss.mergeExtractorSelectors)(cssFileSelectors, cssRawSelectors);\n    purgeCSS.walkThroughCSS(css, cssSelectors);\n    if (purgeCSS.options.fontFace) purgeCSS.removeUnusedFontFaces();\n    if (purgeCSS.options.keyframes) purgeCSS.removeUnusedKeyframes();\n    if (purgeCSS.options.variables) purgeCSS.removeUnusedCSSVariables();\n  }]);\n}","map":{"version":3,"sources":["/home/alan/delivery_2/previously_on/client/node_modules/tailwindcss/lib/lib/purgeUnusedStyles.js"],"names":["Object","defineProperty","exports","value","tailwindExtractor","default","purgeUnusedUtilities","_lodash","_interopRequireDefault","require","_postcss","_purgecss","_interopRequireWildcard","_log","_htmlTags","_path","_parseDependency","_normalizePath","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","removeTailwindMarkers","css","walkAtRules","rule","remove","walkComments","comment","text","trim","content","broadMatches","match","broadMatchesWithoutTrailingSlash","map","trimEnd","innerMatches","concat","getTransformer","config","fileExtension","transformers","purge","transform","DEFAULT","configChanged","registerDependency","_config$purge","purgeEnabled","undefined","process","env","NODE_ENV","Array","isArray","length","warn","extractors","extract","defaultExtractor","originalDefaultExtractor","purgeOptions","options","safelist","preserved","push","fileSpecificExtractors","extension","entries","extractor","extensions","transformer","item","resolve","fileOrGlob","filter","hasLayers","mode","includes","Error","layers","before","forEach","layer","prepend","append","purgeCSS","defaultOptions","standardizeSafelist","variables","variablesStructure","fileFormatContents","o","rawFormatContents","cssFileSelectors","extractSelectorsFromFiles","cssRawSelectors","extractSelectorsFromString","cssSelectors","mergeExtractorSelectors","walkThroughCSS","fontFace","removeUnusedFontFaces","keyframes","removeUnusedKeyframes","removeUnusedCSSVariables"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tailwindExtractor = tailwindExtractor;\nexports.default = purgeUnusedUtilities;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _purgecss = _interopRequireWildcard(require(\"purgecss\"));\n\nvar _log = _interopRequireDefault(require(\"../util/log\"));\n\nvar _htmlTags = _interopRequireDefault(require(\"html-tags\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _parseDependency = _interopRequireDefault(require(\"../util/parseDependency\"));\n\nvar _normalizePath = _interopRequireDefault(require(\"normalize-path\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction removeTailwindMarkers(css) {\n  css.walkAtRules('tailwind', rule => rule.remove());\n  css.walkComments(comment => {\n    switch (comment.text.trim()) {\n      case 'tailwind start base':\n      case 'tailwind end base':\n      case 'tailwind start components':\n      case 'tailwind start utilities':\n      case 'tailwind end components':\n      case 'tailwind end utilities':\n        comment.remove();\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nfunction tailwindExtractor(content) {\n  // Capture as liberally as possible, including things like `h-(screen-1.5)`\n  const broadMatches = content.match(/[^<>\"'`\\s]*[^<>\"'`\\s:]/g) || [];\n  const broadMatchesWithoutTrailingSlash = broadMatches.map(match => _lodash.default.trimEnd(match, '\\\\')); // Capture classes within other delimiters like .block(class=\"w-1/2\") in Pug\n\n  const innerMatches = content.match(/[^<>\"'`\\s.(){}[\\]#=%]*[^<>\"'`\\s.(){}[\\]#=%:]/g) || [];\n  return broadMatches.concat(broadMatchesWithoutTrailingSlash).concat(innerMatches);\n}\n\nfunction getTransformer(config, fileExtension) {\n  let transformers = config.purge && config.purge.transform || {};\n\n  if (typeof transformers === 'function') {\n    transformers = {\n      DEFAULT: transformers\n    };\n  }\n\n  return transformers[fileExtension] || transformers.DEFAULT || (content => content);\n}\n\nfunction purgeUnusedUtilities(config, configChanged, registerDependency) {\n  var _config$purge;\n\n  const purgeEnabled = _lodash.default.get(config, 'purge.enabled', config.purge !== false && config.purge !== undefined && process.env.NODE_ENV === 'production');\n\n  if (!purgeEnabled) {\n    return removeTailwindMarkers;\n  } // Skip if `purge: []` since that's part of the default config\n\n\n  if (Array.isArray(config.purge) && config.purge.length === 0) {\n    if (configChanged) {\n      _log.default.warn(['Tailwind is not purging unused styles because no template paths have been provided.', 'If you have manually configured PurgeCSS outside of Tailwind or are deliberately not removing unused styles, set `purge: false` in your Tailwind config file to silence this warning.', 'https://tailwindcss.com/docs/controlling-file-size/#removing-unused-css']);\n    }\n\n    return removeTailwindMarkers;\n  }\n\n  const extractors = config.purge.extract || {};\n  const transformers = config.purge.transform || {};\n  let {\n    defaultExtractor: originalDefaultExtractor,\n    ...purgeOptions\n  } = config.purge.options || {};\n\n  if ((_config$purge = config.purge) !== null && _config$purge !== void 0 && _config$purge.safelist && !purgeOptions.hasOwnProperty('safelist')) {\n    purgeOptions.safelist = config.purge.safelist;\n  }\n\n  if (!originalDefaultExtractor) {\n    originalDefaultExtractor = typeof extractors === 'function' ? extractors : extractors.DEFAULT || tailwindExtractor;\n  }\n\n  const defaultExtractor = content => {\n    const preserved = originalDefaultExtractor(content);\n\n    if (_lodash.default.get(config, 'purge.preserveHtmlElements', true)) {\n      preserved.push(..._htmlTags.default);\n    }\n\n    return preserved;\n  }; // If `extractors` is a function then we don't have any file-specific extractors,\n  // only a default one.\n\n\n  let fileSpecificExtractors = typeof extractors === 'function' ? {} : extractors; // PurgeCSS doesn't support \"transformers,\" so we implement those using extractors.\n  // If we have a custom transformer for an extension, but not a matching extractor,\n  // then we need to create an extractor that we can augment later.\n\n  if (typeof transformers !== 'function') {\n    for (let [extension] of Object.entries(transformers)) {\n      if (!fileSpecificExtractors[extension]) {\n        fileSpecificExtractors[extension] = defaultExtractor;\n      }\n    }\n  } // Augment file-specific extractors by running the transformer before we extract classes.\n\n\n  fileSpecificExtractors = Object.entries(fileSpecificExtractors).map(([extension, extractor]) => {\n    return {\n      extensions: [extension],\n      extractor: content => {\n        const transformer = getTransformer(config, extension);\n        return extractor(transformer(content));\n      }\n    };\n  });\n  let content = (Array.isArray(config.purge) ? config.purge : config.purge.content || purgeOptions.content || []).map(item => {\n    if (typeof item === 'string') {\n      return (0, _normalizePath.default)(_path.default.resolve(item));\n    }\n\n    return item;\n  });\n\n  for (let fileOrGlob of content.filter(item => typeof item === 'string')) {\n    registerDependency((0, _parseDependency.default)(fileOrGlob));\n  }\n\n  let hasLayers = false;\n\n  const mode = _lodash.default.get(config, 'purge.mode', 'layers');\n\n  return (0, _postcss.default)([function (css) {\n    if (!['all', 'layers'].includes(mode)) {\n      throw new Error('Purge `mode` must be one of `layers` or `all`.');\n    }\n\n    if (mode === 'all') {\n      return;\n    }\n\n    const layers = _lodash.default.get(config, 'purge.layers', ['base', 'components', 'utilities']);\n\n    css.walkComments(comment => {\n      switch (comment.text.trim()) {\n        case `purgecss start ignore`:\n          comment.before(_postcss.default.comment({\n            text: 'purgecss end ignore'\n          }));\n          break;\n\n        case `purgecss end ignore`:\n          comment.before(_postcss.default.comment({\n            text: 'purgecss end ignore'\n          }));\n          comment.text = 'purgecss start ignore';\n          break;\n\n        default:\n          break;\n      }\n\n      layers.forEach(layer => {\n        switch (comment.text.trim()) {\n          case `tailwind start ${layer}`:\n            comment.text = 'purgecss end ignore';\n            hasLayers = true;\n            break;\n\n          case `tailwind end ${layer}`:\n            comment.text = 'purgecss start ignore';\n            break;\n\n          default:\n            break;\n        }\n      });\n    });\n    css.prepend(_postcss.default.comment({\n      text: 'purgecss start ignore'\n    }));\n    css.append(_postcss.default.comment({\n      text: 'purgecss end ignore'\n    }));\n  }, removeTailwindMarkers, async function (css) {\n    if (mode === 'layers' && !hasLayers) {\n      return;\n    }\n\n    const purgeCSS = new _purgecss.default();\n    purgeCSS.options = { ..._purgecss.defaultOptions,\n      defaultExtractor: content => {\n        const transformer = getTransformer(config);\n        return defaultExtractor(transformer(content));\n      },\n      extractors: fileSpecificExtractors,\n      ...purgeOptions,\n      safelist: (0, _purgecss.standardizeSafelist)(purgeOptions.safelist)\n    };\n\n    if (purgeCSS.options.variables) {\n      purgeCSS.variablesStructure.safelist = purgeCSS.options.safelist.variables || [];\n    }\n\n    const fileFormatContents = content.filter(o => typeof o === 'string');\n    const rawFormatContents = content.filter(o => typeof o === 'object');\n    const cssFileSelectors = await purgeCSS.extractSelectorsFromFiles(fileFormatContents, purgeCSS.options.extractors);\n    const cssRawSelectors = await purgeCSS.extractSelectorsFromString(rawFormatContents, purgeCSS.options.extractors);\n    const cssSelectors = (0, _purgecss.mergeExtractorSelectors)(cssFileSelectors, cssRawSelectors);\n    purgeCSS.walkThroughCSS(css, cssSelectors);\n    if (purgeCSS.options.fontFace) purgeCSS.removeUnusedFontFaces();\n    if (purgeCSS.options.keyframes) purgeCSS.removeUnusedKeyframes();\n    if (purgeCSS.options.variables) purgeCSS.removeUnusedCSSVariables();\n  }]);\n}"]},"metadata":{},"sourceType":"script"}