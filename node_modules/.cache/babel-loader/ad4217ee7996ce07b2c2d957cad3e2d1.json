{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = processTailwindFeatures;\n\nvar _normalizeTailwindDirectives = _interopRequireDefault(require(\"./lib/normalizeTailwindDirectives\"));\n\nvar _expandTailwindAtRules = _interopRequireDefault(require(\"./lib/expandTailwindAtRules\"));\n\nvar _expandApplyAtRules = _interopRequireDefault(require(\"./lib/expandApplyAtRules\"));\n\nvar _evaluateTailwindFunctions = _interopRequireDefault(require(\"../lib/evaluateTailwindFunctions\"));\n\nvar _substituteScreenAtRules = _interopRequireDefault(require(\"../lib/substituteScreenAtRules\"));\n\nvar _resolveDefaultsAtRules = _interopRequireDefault(require(\"./lib/resolveDefaultsAtRules\"));\n\nvar _collapseAdjacentRules = _interopRequireDefault(require(\"./lib/collapseAdjacentRules\"));\n\nvar _setupContextUtils = require(\"./lib/setupContextUtils\");\n\nvar _log = _interopRequireDefault(require(\"../util/log\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nlet warned = false;\n\nfunction processTailwindFeatures(setupContext) {\n  return function (root, result) {\n    if (!warned) {\n      _log.default.warn([`You have enabled the JIT engine which is currently in preview.`, 'Preview features are not covered by semver, may introduce breaking changes, and can change at any time.']);\n\n      warned = true;\n    }\n\n    let tailwindDirectives = (0, _normalizeTailwindDirectives.default)(root);\n    let context = setupContext({\n      tailwindDirectives,\n\n      registerDependency(dependency) {\n        result.messages.push({\n          plugin: 'tailwindcss',\n          parent: result.opts.from,\n          ...dependency\n        });\n      },\n\n      createContext(tailwindConfig, changedContent) {\n        return (0, _setupContextUtils.createContext)(tailwindConfig, changedContent, tailwindDirectives, root);\n      }\n\n    })(root, result);\n\n    if (context.tailwindConfig.separator === '-') {\n      throw new Error(\"The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.\");\n    }\n\n    (0, _expandTailwindAtRules.default)(context)(root, result);\n    (0, _expandApplyAtRules.default)(context)(root, result);\n    (0, _evaluateTailwindFunctions.default)(context)(root, result);\n    (0, _substituteScreenAtRules.default)(context)(root, result);\n    (0, _resolveDefaultsAtRules.default)(context)(root, result);\n    (0, _collapseAdjacentRules.default)(context)(root, result);\n  };\n}","map":{"version":3,"sources":["/home/alan/delivery_2/previously_on/client/node_modules/tailwindcss/lib/jit/processTailwindFeatures.js"],"names":["Object","defineProperty","exports","value","default","processTailwindFeatures","_normalizeTailwindDirectives","_interopRequireDefault","require","_expandTailwindAtRules","_expandApplyAtRules","_evaluateTailwindFunctions","_substituteScreenAtRules","_resolveDefaultsAtRules","_collapseAdjacentRules","_setupContextUtils","_log","obj","__esModule","warned","setupContext","root","result","warn","tailwindDirectives","context","registerDependency","dependency","messages","push","plugin","parent","opts","from","createContext","tailwindConfig","changedContent","separator","Error"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = processTailwindFeatures;\n\nvar _normalizeTailwindDirectives = _interopRequireDefault(require(\"./lib/normalizeTailwindDirectives\"));\n\nvar _expandTailwindAtRules = _interopRequireDefault(require(\"./lib/expandTailwindAtRules\"));\n\nvar _expandApplyAtRules = _interopRequireDefault(require(\"./lib/expandApplyAtRules\"));\n\nvar _evaluateTailwindFunctions = _interopRequireDefault(require(\"../lib/evaluateTailwindFunctions\"));\n\nvar _substituteScreenAtRules = _interopRequireDefault(require(\"../lib/substituteScreenAtRules\"));\n\nvar _resolveDefaultsAtRules = _interopRequireDefault(require(\"./lib/resolveDefaultsAtRules\"));\n\nvar _collapseAdjacentRules = _interopRequireDefault(require(\"./lib/collapseAdjacentRules\"));\n\nvar _setupContextUtils = require(\"./lib/setupContextUtils\");\n\nvar _log = _interopRequireDefault(require(\"../util/log\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet warned = false;\n\nfunction processTailwindFeatures(setupContext) {\n  return function (root, result) {\n    if (!warned) {\n      _log.default.warn([`You have enabled the JIT engine which is currently in preview.`, 'Preview features are not covered by semver, may introduce breaking changes, and can change at any time.']);\n\n      warned = true;\n    }\n\n    let tailwindDirectives = (0, _normalizeTailwindDirectives.default)(root);\n    let context = setupContext({\n      tailwindDirectives,\n\n      registerDependency(dependency) {\n        result.messages.push({\n          plugin: 'tailwindcss',\n          parent: result.opts.from,\n          ...dependency\n        });\n      },\n\n      createContext(tailwindConfig, changedContent) {\n        return (0, _setupContextUtils.createContext)(tailwindConfig, changedContent, tailwindDirectives, root);\n      }\n\n    })(root, result);\n\n    if (context.tailwindConfig.separator === '-') {\n      throw new Error(\"The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.\");\n    }\n\n    (0, _expandTailwindAtRules.default)(context)(root, result);\n    (0, _expandApplyAtRules.default)(context)(root, result);\n    (0, _evaluateTailwindFunctions.default)(context)(root, result);\n    (0, _substituteScreenAtRules.default)(context)(root, result);\n    (0, _resolveDefaultsAtRules.default)(context)(root, result);\n    (0, _collapseAdjacentRules.default)(context)(root, result);\n  };\n}"]},"metadata":{},"sourceType":"script"}