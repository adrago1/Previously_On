{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = collapseAdjacentRules;\nlet comparisonMap = {\n  atrule: ['name', 'params'],\n  rule: ['selector']\n};\nlet types = new Set(Object.keys(comparisonMap));\n\nfunction collapseAdjacentRules() {\n  return root => {\n    let currentRule = null;\n    root.each(node => {\n      if (!types.has(node.type)) {\n        currentRule = null;\n        return;\n      }\n\n      if (currentRule === null) {\n        currentRule = node;\n        return;\n      }\n\n      let properties = comparisonMap[node.type];\n\n      if (node.type === 'atrule' && node.name === 'font-face') {\n        currentRule = node;\n      } else if (properties.every(property => {\n        var _node$property, _currentRule$property;\n\n        return ((_node$property = node[property]) !== null && _node$property !== void 0 ? _node$property : '').replace(/\\s+/g, ' ') === ((_currentRule$property = currentRule[property]) !== null && _currentRule$property !== void 0 ? _currentRule$property : '').replace(/\\s+/g, ' ');\n      })) {\n        currentRule.append(node.nodes);\n        node.remove();\n      } else {\n        currentRule = node;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/home/alan/delivery_2/previously_on/client/node_modules/tailwindcss/lib/jit/lib/collapseAdjacentRules.js"],"names":["Object","defineProperty","exports","value","default","collapseAdjacentRules","comparisonMap","atrule","rule","types","Set","keys","root","currentRule","each","node","has","type","properties","name","every","property","_node$property","_currentRule$property","replace","append","nodes","remove"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,qBAAlB;AACA,IAAIC,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,QAAT,CADU;AAElBC,EAAAA,IAAI,EAAE,CAAC,UAAD;AAFY,CAApB;AAIA,IAAIC,KAAK,GAAG,IAAIC,GAAJ,CAAQV,MAAM,CAACW,IAAP,CAAYL,aAAZ,CAAR,CAAZ;;AAEA,SAASD,qBAAT,GAAiC;AAC/B,SAAOO,IAAI,IAAI;AACb,QAAIC,WAAW,GAAG,IAAlB;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAUC,IAAI,IAAI;AAChB,UAAI,CAACN,KAAK,CAACO,GAAN,CAAUD,IAAI,CAACE,IAAf,CAAL,EAA2B;AACzBJ,QAAAA,WAAW,GAAG,IAAd;AACA;AACD;;AAED,UAAIA,WAAW,KAAK,IAApB,EAA0B;AACxBA,QAAAA,WAAW,GAAGE,IAAd;AACA;AACD;;AAED,UAAIG,UAAU,GAAGZ,aAAa,CAACS,IAAI,CAACE,IAAN,CAA9B;;AAEA,UAAIF,IAAI,CAACE,IAAL,KAAc,QAAd,IAA0BF,IAAI,CAACI,IAAL,KAAc,WAA5C,EAAyD;AACvDN,QAAAA,WAAW,GAAGE,IAAd;AACD,OAFD,MAEO,IAAIG,UAAU,CAACE,KAAX,CAAiBC,QAAQ,IAAI;AACtC,YAAIC,cAAJ,EAAoBC,qBAApB;;AAEA,eAAO,CAAC,CAACD,cAAc,GAAGP,IAAI,CAACM,QAAD,CAAtB,MAAsC,IAAtC,IAA8CC,cAAc,KAAK,KAAK,CAAtE,GAA0EA,cAA1E,GAA2F,EAA5F,EAAgGE,OAAhG,CAAwG,MAAxG,EAAgH,GAAhH,MAAyH,CAAC,CAACD,qBAAqB,GAAGV,WAAW,CAACQ,QAAD,CAApC,MAAoD,IAApD,IAA4DE,qBAAqB,KAAK,KAAK,CAA3F,GAA+FA,qBAA/F,GAAuH,EAAxH,EAA4HC,OAA5H,CAAoI,MAApI,EAA4I,GAA5I,CAAhI;AACD,OAJU,CAAJ,EAIH;AACFX,QAAAA,WAAW,CAACY,MAAZ,CAAmBV,IAAI,CAACW,KAAxB;AACAX,QAAAA,IAAI,CAACY,MAAL;AACD,OAPM,MAOA;AACLd,QAAAA,WAAW,GAAGE,IAAd;AACD;AACF,KAzBD;AA0BD,GA5BD;AA6BD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = collapseAdjacentRules;\nlet comparisonMap = {\n  atrule: ['name', 'params'],\n  rule: ['selector']\n};\nlet types = new Set(Object.keys(comparisonMap));\n\nfunction collapseAdjacentRules() {\n  return root => {\n    let currentRule = null;\n    root.each(node => {\n      if (!types.has(node.type)) {\n        currentRule = null;\n        return;\n      }\n\n      if (currentRule === null) {\n        currentRule = node;\n        return;\n      }\n\n      let properties = comparisonMap[node.type];\n\n      if (node.type === 'atrule' && node.name === 'font-face') {\n        currentRule = node;\n      } else if (properties.every(property => {\n        var _node$property, _currentRule$property;\n\n        return ((_node$property = node[property]) !== null && _node$property !== void 0 ? _node$property : '').replace(/\\s+/g, ' ') === ((_currentRule$property = currentRule[property]) !== null && _currentRule$property !== void 0 ? _currentRule$property : '').replace(/\\s+/g, ' ');\n      })) {\n        currentRule.append(node.nodes);\n        node.remove();\n      } else {\n        currentRule = node;\n      }\n    });\n  };\n}"]},"metadata":{},"sourceType":"script"}