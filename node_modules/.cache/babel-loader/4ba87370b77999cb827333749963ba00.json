{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeTailwindDirectives;\n\nfunction normalizeTailwindDirectives(root) {\n  let tailwindDirectives = new Set();\n  let layerDirectives = new Set();\n  root.walkAtRules(atRule => {\n    if (atRule.name === 'import') {\n      if (atRule.params === '\"tailwindcss/base\"' || atRule.params === \"'tailwindcss/base'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'base';\n      } else if (atRule.params === '\"tailwindcss/components\"' || atRule.params === \"'tailwindcss/components'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'components';\n      } else if (atRule.params === '\"tailwindcss/utilities\"' || atRule.params === \"'tailwindcss/utilities'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'utilities';\n      } else if (atRule.params === '\"tailwindcss/screens\"' || atRule.params === \"'tailwindcss/screens'\" || atRule.params === '\"tailwindcss/variants\"' || atRule.params === \"'tailwindcss/variants'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'variants';\n      }\n    }\n\n    if (atRule.name === 'tailwind') {\n      if (atRule.params === 'screens') {\n        atRule.params = 'variants';\n      }\n\n      tailwindDirectives.add(atRule.params);\n    }\n\n    if (['layer', 'responsive', 'variants'].includes(atRule.name)) {\n      layerDirectives.add(atRule);\n    }\n  });\n\n  if (!tailwindDirectives.has('base') || !tailwindDirectives.has('components') || !tailwindDirectives.has('utilities')) {\n    for (let rule of layerDirectives) {\n      if (rule.name === 'layer' && ['base', 'components', 'utilities'].includes(rule.params)) {\n        if (!tailwindDirectives.has(rule.params)) {\n          throw rule.error(`\\`@layer ${rule.params}\\` is used but no matching \\`@tailwind ${rule.params}\\` directive is present.`);\n        }\n      } else if (rule.name === 'responsive') {\n        if (!tailwindDirectives.has('utilities')) {\n          throw rule.error('`@responsive` is used but `@tailwind utilities` is missing.');\n        }\n      } else if (rule.name === 'variants') {\n        if (!tailwindDirectives.has('utilities')) {\n          throw rule.error('`@variants` is used but `@tailwind utilities` is missing.');\n        }\n      }\n    }\n  }\n\n  return tailwindDirectives;\n}","map":{"version":3,"sources":["/home/alan/delivery_2/previously_on/client/node_modules/tailwindcss/lib/jit/lib/normalizeTailwindDirectives.js"],"names":["Object","defineProperty","exports","value","default","normalizeTailwindDirectives","root","tailwindDirectives","Set","layerDirectives","walkAtRules","atRule","name","params","add","includes","has","rule","error"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeTailwindDirectives;\n\nfunction normalizeTailwindDirectives(root) {\n  let tailwindDirectives = new Set();\n  let layerDirectives = new Set();\n  root.walkAtRules(atRule => {\n    if (atRule.name === 'import') {\n      if (atRule.params === '\"tailwindcss/base\"' || atRule.params === \"'tailwindcss/base'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'base';\n      } else if (atRule.params === '\"tailwindcss/components\"' || atRule.params === \"'tailwindcss/components'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'components';\n      } else if (atRule.params === '\"tailwindcss/utilities\"' || atRule.params === \"'tailwindcss/utilities'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'utilities';\n      } else if (atRule.params === '\"tailwindcss/screens\"' || atRule.params === \"'tailwindcss/screens'\" || atRule.params === '\"tailwindcss/variants\"' || atRule.params === \"'tailwindcss/variants'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'variants';\n      }\n    }\n\n    if (atRule.name === 'tailwind') {\n      if (atRule.params === 'screens') {\n        atRule.params = 'variants';\n      }\n\n      tailwindDirectives.add(atRule.params);\n    }\n\n    if (['layer', 'responsive', 'variants'].includes(atRule.name)) {\n      layerDirectives.add(atRule);\n    }\n  });\n\n  if (!tailwindDirectives.has('base') || !tailwindDirectives.has('components') || !tailwindDirectives.has('utilities')) {\n    for (let rule of layerDirectives) {\n      if (rule.name === 'layer' && ['base', 'components', 'utilities'].includes(rule.params)) {\n        if (!tailwindDirectives.has(rule.params)) {\n          throw rule.error(`\\`@layer ${rule.params}\\` is used but no matching \\`@tailwind ${rule.params}\\` directive is present.`);\n        }\n      } else if (rule.name === 'responsive') {\n        if (!tailwindDirectives.has('utilities')) {\n          throw rule.error('`@responsive` is used but `@tailwind utilities` is missing.');\n        }\n      } else if (rule.name === 'variants') {\n        if (!tailwindDirectives.has('utilities')) {\n          throw rule.error('`@variants` is used but `@tailwind utilities` is missing.');\n        }\n      }\n    }\n  }\n\n  return tailwindDirectives;\n}"]},"metadata":{},"sourceType":"script"}