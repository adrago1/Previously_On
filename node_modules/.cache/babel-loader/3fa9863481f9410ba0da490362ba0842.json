{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveDefaultsAtRules;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _featureFlags = require(\"../../featureFlags\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction minimumImpactSelector(nodes) {\n  let pseudos = nodes.filter(n => n.type === 'pseudo');\n  let [bestNode] = nodes;\n\n  for (let [type, getNode = n => n] of [['class'], ['id', n => _postcssSelectorParser.default.attribute({\n    attribute: 'id',\n    operator: '=',\n    value: n.value,\n    quoteMark: '\"'\n  })], ['attribute']]) {\n    let match = nodes.find(n => n.type === type);\n\n    if (match) {\n      bestNode = getNode(match);\n      break;\n    }\n  }\n\n  return [bestNode, ...pseudos].join('').trim();\n}\n\nlet elementSelectorParser = (0, _postcssSelectorParser.default)(selectors => {\n  return selectors.map(s => {\n    let nodes = s.split(n => n.type === 'combinator').pop().filter(n => n.type !== 'pseudo' || n.value.startsWith('::'));\n    return minimumImpactSelector(nodes);\n  });\n});\nlet cache = new Map();\n\nfunction extractElementSelector(selector) {\n  if (!cache.has(selector)) {\n    cache.set(selector, elementSelectorParser.transformSync(selector));\n  }\n\n  return cache.get(selector);\n}\n\nfunction resolveDefaultsAtRules({\n  tailwindConfig\n}) {\n  return root => {\n    let variableNodeMap = new Map();\n    let universals = new Set();\n    root.walkAtRules('defaults', rule => {\n      if (rule.nodes && rule.nodes.length > 0) {\n        universals.add(rule);\n        return;\n      }\n\n      let variable = rule.params;\n\n      if (!variableNodeMap.has(variable)) {\n        variableNodeMap.set(variable, new Set());\n      }\n\n      variableNodeMap.get(variable).add(rule.parent);\n      rule.remove();\n    });\n\n    for (let universal of universals) {\n      var _variableNodeMap$get;\n\n      let selectors = new Set();\n      let rules = (_variableNodeMap$get = variableNodeMap.get(universal.params)) !== null && _variableNodeMap$get !== void 0 ? _variableNodeMap$get : [];\n\n      for (let rule of rules) {\n        for (let selector of extractElementSelector(rule.selector)) {\n          selectors.add(selector);\n        }\n      }\n\n      if (selectors.size === 0) {\n        universal.remove();\n        continue;\n      }\n\n      let universalRule = _postcss.default.rule();\n\n      if ((0, _featureFlags.flagEnabled)(tailwindConfig, 'optimizeUniversalDefaults')) {\n        universalRule.selectors = [...selectors];\n      } else {\n        universalRule.selectors = ['*', '::before', '::after'];\n      }\n\n      universalRule.append(universal.nodes);\n      universal.before(universalRule);\n      universal.remove();\n    }\n  };\n}","map":{"version":3,"sources":["/home/alan/delivery_2/previously_on/client/node_modules/tailwindcss/lib/jit/lib/resolveDefaultsAtRules.js"],"names":["Object","defineProperty","exports","value","default","resolveDefaultsAtRules","_postcss","_interopRequireDefault","require","_postcssSelectorParser","_featureFlags","obj","__esModule","minimumImpactSelector","nodes","pseudos","filter","n","type","bestNode","getNode","attribute","operator","quoteMark","match","find","join","trim","elementSelectorParser","selectors","map","s","split","pop","startsWith","cache","Map","extractElementSelector","selector","has","set","transformSync","get","tailwindConfig","root","variableNodeMap","universals","Set","walkAtRules","rule","length","add","variable","params","parent","remove","universal","_variableNodeMap$get","rules","size","universalRule","flagEnabled","append","before"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveDefaultsAtRules;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _featureFlags = require(\"../../featureFlags\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction minimumImpactSelector(nodes) {\n  let pseudos = nodes.filter(n => n.type === 'pseudo');\n  let [bestNode] = nodes;\n\n  for (let [type, getNode = n => n] of [['class'], ['id', n => _postcssSelectorParser.default.attribute({\n    attribute: 'id',\n    operator: '=',\n    value: n.value,\n    quoteMark: '\"'\n  })], ['attribute']]) {\n    let match = nodes.find(n => n.type === type);\n\n    if (match) {\n      bestNode = getNode(match);\n      break;\n    }\n  }\n\n  return [bestNode, ...pseudos].join('').trim();\n}\n\nlet elementSelectorParser = (0, _postcssSelectorParser.default)(selectors => {\n  return selectors.map(s => {\n    let nodes = s.split(n => n.type === 'combinator').pop().filter(n => n.type !== 'pseudo' || n.value.startsWith('::'));\n    return minimumImpactSelector(nodes);\n  });\n});\nlet cache = new Map();\n\nfunction extractElementSelector(selector) {\n  if (!cache.has(selector)) {\n    cache.set(selector, elementSelectorParser.transformSync(selector));\n  }\n\n  return cache.get(selector);\n}\n\nfunction resolveDefaultsAtRules({\n  tailwindConfig\n}) {\n  return root => {\n    let variableNodeMap = new Map();\n    let universals = new Set();\n    root.walkAtRules('defaults', rule => {\n      if (rule.nodes && rule.nodes.length > 0) {\n        universals.add(rule);\n        return;\n      }\n\n      let variable = rule.params;\n\n      if (!variableNodeMap.has(variable)) {\n        variableNodeMap.set(variable, new Set());\n      }\n\n      variableNodeMap.get(variable).add(rule.parent);\n      rule.remove();\n    });\n\n    for (let universal of universals) {\n      var _variableNodeMap$get;\n\n      let selectors = new Set();\n      let rules = (_variableNodeMap$get = variableNodeMap.get(universal.params)) !== null && _variableNodeMap$get !== void 0 ? _variableNodeMap$get : [];\n\n      for (let rule of rules) {\n        for (let selector of extractElementSelector(rule.selector)) {\n          selectors.add(selector);\n        }\n      }\n\n      if (selectors.size === 0) {\n        universal.remove();\n        continue;\n      }\n\n      let universalRule = _postcss.default.rule();\n\n      if ((0, _featureFlags.flagEnabled)(tailwindConfig, 'optimizeUniversalDefaults')) {\n        universalRule.selectors = [...selectors];\n      } else {\n        universalRule.selectors = ['*', '::before', '::after'];\n      }\n\n      universalRule.append(universal.nodes);\n      universal.before(universalRule);\n      universal.remove();\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}